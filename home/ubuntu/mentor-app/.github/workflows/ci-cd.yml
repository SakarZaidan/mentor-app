name: Mentor App CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x]
        mongodb-version: [4.4]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './server/package.json'
    
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.7.0
      with:
        mongodb-version: ${{ matrix.mongodb-version }}
    
    - name: Install dependencies
      working-directory: ./server
      run: npm ci
    
    - name: Run tests
      working-directory: ./server
      run: npm test
      env:
        CI: true
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        MONGODB_URI: mongodb://localhost:27017/mentor-app-test
  
  test-frontend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './client/web/package.json'
    
    - name: Install dependencies
      working-directory: ./client/web
      run: npm ci
    
    - name: Run tests
      working-directory: ./client/web
      run: npm test
      env:
        CI: true
  
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    strategy:
      matrix:
        node-version: [16.x]
        mongodb-version: [4.4]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.7.0
      with:
        mongodb-version: ${{ matrix.mongodb-version }}
    
    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./client/web
      run: npm ci
    
    - name: Install Cypress
      working-directory: ./client
      run: npm install cypress
    
    - name: Start backend server
      working-directory: ./server
      run: |
        npm start &
        sleep 10
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        MONGODB_URI: mongodb://localhost:27017/mentor-app-test
        PORT: 5000
    
    - name: Start frontend server
      working-directory: ./client/web
      run: |
        npm start &
        sleep 10
      env:
        CI: false
        REACT_APP_API_URL: http://localhost:5000/api
    
    - name: Run Cypress tests
      working-directory: ./client
      run: npx cypress run
  
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Build and deploy backend
      working-directory: ./server
      run: |
        npm ci
        zip -r deploy.zip .
        aws s3 cp deploy.zip s3://mentor-app-deployments/backend/deploy.zip
        aws elasticbeanstalk create-application-version \
          --application-name mentor-app \
          --version-label backend-${{ github.sha }} \
          --source-bundle S3Bucket=mentor-app-deployments,S3Key=backend/deploy.zip
        aws elasticbeanstalk update-environment \
          --environment-name mentor-app-prod \
          --version-label backend-${{ github.sha }}
    
    - name: Build and deploy web frontend
      working-directory: ./client/web
      run: |
        npm ci
        npm run build
        aws s3 sync build/ s3://mentor-app-web --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
    
    - name: Notify deployment success
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: good
        SLACK_TITLE: Mentor App Deployment
        SLACK_MESSAGE: 'Successfully deployed Mentor App to production :rocket:'
